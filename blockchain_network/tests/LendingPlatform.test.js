const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("LendingPlatform Main Flow Test", function () {
  let lendingPlatform;
  let mockUSDT;
  let mockPriceFeed;
  let owner;
  let borrower;
  let lender;
  let otherUser;

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const INITIAL_ETH_PRICE = 3000; // $3000 per ETH
  const INITIAL_USDT_SUPPLY = ethers.parseEther("1000000");
  const LOAN_AMOUNT = ethers.parseEther("1000"); // 1000 USDT
  const REPAYMENT_PERCENT = 110; // 110% (10% –ø—Ä–æ—Ü–µ–Ω—Ç)
  const LOAN_DURATION = 30 * 24 * 60 * 60; // 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  beforeEach(async function () {
    [owner, borrower, lender, otherUser] = await ethers.getSigners();

    // Deploy MockERC20 (USDT)
    const MockERC20 = await ethers.getContractFactory("MockERC20");
    mockUSDT = await MockERC20.deploy("Mock USDT", "USDT", INITIAL_USDT_SUPPLY);
    await mockUSDT.waitForDeployment();

    // Deploy MockAggregatorV3 (ETH/USD Price Feed)
    const MockAggregatorV3 = await ethers.getContractFactory("MockAggregatorV3");
    mockPriceFeed = await MockAggregatorV3.deploy(
      INITIAL_ETH_PRICE * 10**8, // Chainlink price with 8 decimals
      8,
      "ETH/USD",
      1
    );
    await mockPriceFeed.waitForDeployment();

    // Deploy LendingPlatform
    const LendingPlatform = await ethers.getContractFactory("LendingPlatform");
    lendingPlatform = await LendingPlatform.deploy(
      await mockUSDT.getAddress(),
      await mockPriceFeed.getAddress()
    );
    await lendingPlatform.waitForDeployment();

    // Mint USDT to participants
    await mockUSDT.mint(lender.address, ethers.parseEther("50000"));
    await mockUSDT.mint(borrower.address, ethers.parseEther("50000"));
    await mockUSDT.mint(otherUser.address, ethers.parseEther("50000"));

    console.log("‚úÖ Setup completed");
  });

  describe("üéØ SCENARIO 1: Successful Loan Flow", function () {
    it("Should complete full loan cycle: create ‚Üí fund ‚Üí confirm ‚Üí repay", async function () {
      console.log("\nüìã SCENARIO 1: Complete successful loan flow");

      // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É ETH –¥–ª—è –∑–∞–ª–æ–≥–∞
      const ethPrice = await lendingPlatform.getLatestETHPrice();
      const ethRatio = await lendingPlatform.ETHRatio();
      const requiredETH = (LOAN_AMOUNT * ethRatio * 10n**18n) / (ethPrice * 100n);

      console.log(`üí∞ Required ETH collateral: ${ethers.formatEther(requiredETH)} ETH`);

      // 2. BORROWER: –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç
      console.log("\nüî∏ Step 1: Borrower creates loan request");
      const borrowerETHBefore = await ethers.provider.getBalance(borrower.address);
      
      const createTx = await lendingPlatform.connect(borrower).createLoanRequest(
        LOAN_AMOUNT,
        REPAYMENT_PERCENT,
        LOAN_DURATION,
        { value: requiredETH }
      );

      await expect(createTx)
        .to.emit(lendingPlatform, "LoanRequestAwaiting")
        .withArgs(1, borrower.address, LOAN_AMOUNT, REPAYMENT_PERCENT, requiredETH);

      const loan1 = await lendingPlatform.getLoanDetails(borrower.address, 1);
      expect(loan1.status).to.equal(0); // Status.Awaiting
      expect(loan1.borrower).to.equal(borrower.address);
      expect(loan1.USDC).to.equal(LOAN_AMOUNT);
      expect(loan1.Percent).to.equal(REPAYMENT_PERCENT);
      
      console.log(`‚úÖ Loan request created with ID: ${loan1.id}`);

      // 3. LENDER: –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ—Ç –µ—ë
      console.log("\nüî∏ Step 2: Lender funds the request");
      const lenderUSDTBefore = await mockUSDT.balanceOf(lender.address);
      
      // Approve USDT transfer
      await mockUSDT.connect(lender).approve(await lendingPlatform.getAddress(), LOAN_AMOUNT);
      
      const fundTx = await lendingPlatform.connect(lender).fundRequest(borrower.address, 1);
      
      await expect(fundTx)
        .to.emit(lendingPlatform, "RequestPending")
        .withArgs(1, borrower.address, lender.address);

      const loan2 = await lendingPlatform.getLoanDetails(borrower.address, 1);
      expect(loan2.status).to.equal(1); // Status.Pending
      expect(loan2.lender).to.equal(lender.address);
      
      const lenderUSDTAfter = await mockUSDT.balanceOf(lender.address);
      expect(lenderUSDTAfter).to.equal(lenderUSDTBefore - LOAN_AMOUNT);
      
      console.log(`‚úÖ Loan funded by lender. Contract balance: ${ethers.formatEther(LOAN_AMOUNT)} USDT`);

      // 4. BORROWER: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É
      console.log("\nüî∏ Step 3: Borrower confirms the deal");
      const borrowerUSDTBefore = await mockUSDT.balanceOf(borrower.address);
      
      const confirmTx = await lendingPlatform.connect(borrower).confirmDeal(borrower.address, 1);
      
      await expect(confirmTx)
        .to.emit(lendingPlatform, "DealConfirmed")
        .withArgs(1, borrower.address, borrower.address);
      
      await expect(confirmTx)
        .to.emit(lendingPlatform, "LoanActivated");

      const loan3 = await lendingPlatform.getLoanDetails(borrower.address, 1);
      expect(loan3.status).to.equal(2); // Status.Active
      expect(loan3.borrowerConfirmed).to.be.true;
      expect(loan3.dueDate).to.be.greaterThan(0);
      
      const borrowerUSDTAfter = await mockUSDT.balanceOf(borrower.address);
      expect(borrowerUSDTAfter).to.equal(borrowerUSDTBefore + LOAN_AMOUNT);
      
      console.log(`‚úÖ Deal confirmed and activated. Borrower received: ${ethers.formatEther(LOAN_AMOUNT)} USDT`);

      // 5. BORROWER: –ü–æ–≥–∞—à–∞–µ—Ç –∑–∞—ë–º –≤ —Å—Ä–æ–∫
      console.log("\nüî∏ Step 4: Borrower repays loan on time");
      const repaymentAmount = (LOAN_AMOUNT * BigInt(REPAYMENT_PERCENT)) / 100n;
      const lenderUSDTBeforeRepay = await mockUSDT.balanceOf(lender.address);
      const borrowerETHBeforeRepay = await ethers.provider.getBalance(borrower.address);
      
      // Approve repayment
      await mockUSDT.connect(borrower).approve(await lendingPlatform.getAddress(), repaymentAmount);
      
      const repayTx = await lendingPlatform.connect(borrower).repayLoan(1);
      
      await expect(repayTx)
        .to.emit(lendingPlatform, "LoanReturned")
        .withArgs(1, borrower.address);

      const loan4 = await lendingPlatform.getLoanDetails(borrower.address, 1);
      expect(loan4.status).to.equal(3); // Status.Returned
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Ä–µ–ø–µ–π–º–µ–Ω—Ç
      const lenderUSDTAfterRepay = await mockUSDT.balanceOf(lender.address);
      expect(lenderUSDTAfterRepay).to.equal(lenderUSDTBeforeRepay + repaymentAmount);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—ë–º—â–∏–∫ –ø–æ–ª—É—á–∏–ª –∑–∞–ª–æ–≥ –æ–±—Ä–∞—Ç–Ω–æ
      const borrowerETHAfterRepay = await ethers.provider.getBalance(borrower.address);
      expect(borrowerETHAfterRepay).to.be.greaterThan(borrowerETHBeforeRepay);
      
      console.log(`‚úÖ Loan repaid successfully. Lender received: ${ethers.formatEther(repaymentAmount)} USDT`);
      console.log(`‚úÖ Borrower got back: ${ethers.formatEther(requiredETH)} ETH collateral`);
      console.log("\nüéâ SCENARIO 1 COMPLETED SUCCESSFULLY!");
    });
  });

  describe("üéØ SCENARIO 2: Deal Cancellation Flow", function () {
    it("Should cancel deal and return funds to both parties", async function () {
      console.log("\nüìã SCENARIO 2: Deal cancellation flow");

      // 1. Setup loan request
      const ethPrice = await lendingPlatform.getLatestETHPrice();
      const ethRatio = await lendingPlatform.ETHRatio();
      const requiredETH = (LOAN_AMOUNT * ethRatio * 10n**18n) / (ethPrice * 100n);

      // 2. BORROWER: –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Step 1: Borrower creates loan request");
      await lendingPlatform.connect(borrower).createLoanRequest(
        LOAN_AMOUNT,
        REPAYMENT_PERCENT,
        LOAN_DURATION,
        { value: requiredETH }
      );

      // 3. LENDER: –§–∏–Ω–∞–Ω—Å–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Step 2: Lender funds the request");
      await mockUSDT.connect(lender).approve(await lendingPlatform.getAddress(), LOAN_AMOUNT);
      await lendingPlatform.connect(lender).fundRequest(borrower.address, 1);

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
      const borrowerETHBefore = await ethers.provider.getBalance(borrower.address);
      const lenderUSDTBefore = await mockUSDT.balanceOf(lender.address);

      // 5. BORROWER: –û—Ç–º–µ–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É
      console.log("\nüî∏ Step 3: Borrower cancels the deal");
      const cancelTx = await lendingPlatform.connect(borrower).cancelDeal(borrower.address, 1);
      
      await expect(cancelTx)
        .to.emit(lendingPlatform, "DealCancell")
        .withArgs(1, borrower.address);

      const loan = await lendingPlatform.getLoanDetails(borrower.address, 1);
      expect(loan.status).to.equal(5); // Status.Cancell

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
      const borrowerETHAfter = await ethers.provider.getBalance(borrower.address);
      const lenderUSDTAfter = await mockUSDT.balanceOf(lender.address);

      expect(borrowerETHAfter).to.be.greaterThan(borrowerETHBefore);
      expect(lenderUSDTAfter).to.equal(lenderUSDTBefore + LOAN_AMOUNT);

      console.log(`‚úÖ Deal cancelled. ETH returned to borrower, USDT returned to lender`);
      console.log("\nüéâ SCENARIO 2 COMPLETED SUCCESSFULLY!");
    });
  });

  describe("üéØ SCENARIO 3: Multiple Loans by Same Borrower", function () {
    it("Should handle multiple loans from same borrower", async function () {
      console.log("\nüìã SCENARIO 3: Multiple loans from same borrower");

      const ethPrice = await lendingPlatform.getLatestETHPrice();
      const ethRatio = await lendingPlatform.ETHRatio();
      const requiredETH = (LOAN_AMOUNT * ethRatio * 10n**18n) / (ethPrice * 100n);

      // 1. BORROWER: –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Step 1: Borrower creates first loan request");
      await lendingPlatform.connect(borrower).createLoanRequest(
        LOAN_AMOUNT,
        REPAYMENT_PERCENT,
        LOAN_DURATION,
        { value: requiredETH }
      );

      // 2. BORROWER: –°–æ–∑–¥–∞–µ—Ç –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Step 2: Borrower creates second loan request");
      await lendingPlatform.connect(borrower).createLoanRequest(
        LOAN_AMOUNT / 2n, // –ú–µ–Ω—å—à–∞—è —Å—É–º–º–∞
        120, // –ë–æ–ª—å—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
        LOAN_DURATION,
        { value: requiredETH / 2n }
      );

      // 3. LENDER: –§–∏–Ω–∞–Ω—Å–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Step 3: Lender funds first request");
      await mockUSDT.connect(lender).approve(await lendingPlatform.getAddress(), LOAN_AMOUNT);
      await lendingPlatform.connect(lender).fundRequest(borrower.address, 1);

      // 4. OTHER_USER: –§–∏–Ω–∞–Ω—Å–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Step 4: Other user funds second request");
      await mockUSDT.connect(otherUser).approve(await lendingPlatform.getAddress(), LOAN_AMOUNT / 2n);
      await lendingPlatform.connect(otherUser).fundRequest(borrower.address, 2);

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–µ–∏—Ö –∑–∞—è–≤–æ–∫
      const loan1 = await lendingPlatform.getLoanDetails(borrower.address, 1);
      const loan2 = await lendingPlatform.getLoanDetails(borrower.address, 2);

      expect(loan1.status).to.equal(1); // Status.Pending
      expect(loan1.lender).to.equal(lender.address);
      expect(loan1.USDC).to.equal(LOAN_AMOUNT);

      expect(loan2.status).to.equal(1); // Status.Pending
      expect(loan2.lender).to.equal(otherUser.address);
      expect(loan2.USDC).to.equal(LOAN_AMOUNT / 2n);

      console.log(`‚úÖ Both loans are in pending state with different lenders`);

      // 6. BORROWER: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É
      console.log("\nüî∏ Step 5: Borrower confirms first deal only");
      await lendingPlatform.connect(borrower).confirmDeal(borrower.address, 1);

      // 7. BORROWER: –û—Ç–º–µ–Ω—è–µ—Ç –≤—Ç–æ—Ä—É—é —Å–¥–µ–ª–∫—É
      console.log("\nüî∏ Step 6: Borrower cancels second deal");
      await lendingPlatform.connect(borrower).cancelDeal(borrower.address, 2);

      // 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
      const finalLoan1 = await lendingPlatform.getLoanDetails(borrower.address, 1);
      const finalLoan2 = await lendingPlatform.getLoanDetails(borrower.address, 2);

      expect(finalLoan1.status).to.equal(2); // Status.Active
      expect(finalLoan2.status).to.equal(5); // Status.Cancell

      console.log(`‚úÖ First loan activated, second loan cancelled`);
      console.log("\nüéâ SCENARIO 3 COMPLETED SUCCESSFULLY!");
    });
  });

  describe("üéØ SCENARIO 4: Failed Scenarios", function () {
    it("Should reject invalid loan requests", async function () {
      console.log("\nüìã SCENARIO 4: Failed scenarios testing");

      // 1. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∑–∞–ª–æ–≥–æ–º
      console.log("\nüî∏ Test 1: Insufficient collateral");
      await expect(
        lendingPlatform.connect(borrower).createLoanRequest(
          LOAN_AMOUNT,
          REPAYMENT_PERCENT,
          LOAN_DURATION,
          { value: ethers.parseEther("0.1") } // –°–ª–∏—à–∫–æ–º –º–∞–ª–æ ETH
        )
      ).to.be.revertedWith("Not enough ETH ETH");
      console.log("‚úÖ Correctly rejected insufficient collateral");

      // 2. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
      console.log("\nüî∏ Test 2: Invalid repayment percentage");
      const ethPrice = await lendingPlatform.getLatestETHPrice();
      const ethRatio = await lendingPlatform.ETHRatio();
      const requiredETH = (LOAN_AMOUNT * ethRatio * 10n**18n) / (ethPrice * 100n);
      

      // 3. –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
      await lendingPlatform.connect(borrower).createLoanRequest(
        LOAN_AMOUNT,
        REPAYMENT_PERCENT,
        LOAN_DURATION,
        { value: requiredETH }
      );

      // 4. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—ë–º—â–∏–∫–∞ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Test 4: Borrower tries to fund own request");
      await mockUSDT.connect(borrower).approve(await lendingPlatform.getAddress(), LOAN_AMOUNT);
      await expect(
        lendingPlatform.connect(borrower).fundRequest(borrower.address, 1)
      ).to.be.revertedWith("Borrower cannot fund their own request");
      console.log("‚úÖ Correctly rejected borrower funding own request");

      // 5. –ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ allowance
      console.log("\nüî∏ Test 5: Funding without sufficient allowance");
      await expect(
        lendingPlatform.connect(lender).fundRequest(borrower.address, 1)
      ).to.be.revertedWith("Not enough USDT allowance");
      console.log("‚úÖ Correctly rejected insufficient allowance");

      console.log("\nüéâ SCENARIO 4 COMPLETED SUCCESSFULLY!");
    });
  });

  describe("üéØ SCENARIO 5: Edge Cases", function () {
    it("Should handle edge cases properly", async function () {
      console.log("\nüìã SCENARIO 5: Edge cases testing");

      const ethPrice = await lendingPlatform.getLatestETHPrice();
      const ethRatio = await lendingPlatform.ETHRatio();
      const requiredETH = (LOAN_AMOUNT * ethRatio * 10n**18n) / (ethPrice * 100n);

      // 1. –°–æ–∑–¥–∞–µ–º –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
      console.log("\nüî∏ Setting up loan for edge case testing");
      await lendingPlatform.connect(borrower).createLoanRequest(
        LOAN_AMOUNT,
        REPAYMENT_PERCENT,
        LOAN_DURATION,
        { value: requiredETH }
      );

      await mockUSDT.connect(lender).approve(await lendingPlatform.getAddress(), LOAN_AMOUNT);
      await lendingPlatform.connect(lender).fundRequest(borrower.address, 1);

      // 2. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
      console.log("\nüî∏ Test 1: Non-participant tries to confirm");
      await expect(
        lendingPlatform.connect(otherUser).confirmDeal(borrower.address, 1)
      ).to.be.revertedWith("Only borrower can confirm");
      console.log("‚úÖ Correctly rejected non-participant confirmation");

      // 3. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
      console.log("\nüî∏ Test 2: Non-participant tries to cancel");
      await expect(
        lendingPlatform.connect(otherUser).cancelDeal(borrower.address, 1)
      ).to.be.revertedWith("Only parties can cancel");
      console.log("‚úÖ Correctly rejected non-participant cancellation");

      // 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–¥–µ–ª–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
      await lendingPlatform.connect(borrower).confirmDeal(borrower.address, 1);

      // 5. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      console.log("\nüî∏ Test 3: Multiple confirmations");
      await expect(
        lendingPlatform.connect(borrower).confirmDeal(borrower.address, 1)
      ).to.be.revertedWith("Loan is not in funding state");
      console.log("‚úÖ Correctly rejected multiple confirmations");

      // 6. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏
      console.log("\nüî∏ Test 4: Cancel active deal");
      await expect(
        lendingPlatform.connect(borrower).cancelDeal(borrower.address, 1)
      ).to.be.revertedWith("Can only cancel a Pending deal");
      console.log("‚úÖ Correctly rejected cancellation of active deal");


      console.log("\nüéâ SCENARIO 5 COMPLETED SUCCESSFULLY!");
    });
  });

  describe("üéØ SUMMARY", function () {
    it("Should display test summary", async function () {
      console.log("\n" + "=".repeat(60));
      console.log("üéâ ALL MAIN FLOW TESTS COMPLETED SUCCESSFULLY!");
      console.log("=".repeat(60));
      console.log("‚úÖ Scenario 1: Full successful loan cycle");
      console.log("‚úÖ Scenario 2: Deal cancellation flow");
      console.log("‚úÖ Scenario 3: Multiple loans handling");
      console.log("‚úÖ Scenario 4: Invalid requests rejection");
      console.log("‚úÖ Scenario 5: Edge cases handling");
      console.log("=".repeat(60));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const contractBalance = await ethers.provider.getBalance(await lendingPlatform.getAddress());
      console.log(`üìä Final contract ETH balance: ${ethers.formatEther(contractBalance)} ETH`);
      
      expect(true).to.be.true; // Placeholder assertion
    });
  });
});